{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hojjat&#x27;s Blog",
    "description": "",
    "home_page_url": "https://hojjatabdollahi.github.io",
    "feed_url": "https://hojjatabdollahi.github.io/feed.json",
    "user_comment": "",
    "icon": "https://hojjatabdollahi.github.io/media/website/1-1VP7np2H17ecc1j8roHGvQ.jpeg",
    "author": {
        "name": "Hojjat"
    },
    "items": [
        {
            "id": "https://hojjatabdollahi.github.io/how-to-switch-between-different-versions-of-g.html",
            "url": "https://hojjatabdollahi.github.io/how-to-switch-between-different-versions-of-g.html",
            "title": "How to switch between different versions of g++",
            "summary": "I needed to compile an old code and needed to use older versions of g++. Here is how I did it: sudo apt install g++-4.8 g++-5 g++-6 g++-7 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 1 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1 sudo update-alternatives --install&hellip;",
            "content_html": "<p>I needed to compile an old code and needed to use older versions of g++. Here is how I did it:</p>\n<ul>\n<li>First, install the older version</li>\n</ul>\n<p><code class=\"language-bash\">sudo apt install g++-4.8 g++-5 g++-6 g++-7</code></p>\n<ul>\n<li>Then, tell the system that there is a new alternative</li>\n</ul>\n<p><code class=\"language-bash\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 1</code></p>\n<p><code>sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1</code></p>\n<p><code class=\"language-bash\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 1</code></p>\n<ul>\n<li>Finally you can choose which g++ you want to use:</li>\n</ul>\n<p><code class=\"language-bash\">sudo upate-alternatives --config g++</code></p>\n<p> </p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "linux"
            ],
            "date_published": "2020-04-07T11:32:51-06:00",
            "date_modified": "2020-04-07T11:33:19-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/cisco-anyconnect-vpn-in-linux-ubuntu-1910.html",
            "url": "https://hojjatabdollahi.github.io/cisco-anyconnect-vpn-in-linux-ubuntu-1910.html",
            "title": "Cisco AnyConnect VPN in Linux (Ubuntu 18.04,19.10)",
            "summary": "I’m writing this here for my future use. Install these: Ubuntu 18.04: sudo apt-get install openconnect lib32ncurses5 lib32tinfo5 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools Ubuntu 19.10: sudo apt-get install openconnect lib32ncurses6 lib32tinfo6 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools Download and unzip this. Go to the&hellip;",
            "content_html": "<p><em>I’m writing this here for my future use.</em><br><br>Install these:<br>Ubuntu 18.04:</p>\n<p><code class=\"language-bash\">sudo apt-get install openconnect lib32ncurses5 lib32tinfo5 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools</code></p>\n<p>Ubuntu 19.10:<br><code class=\"language-bash\">sudo apt-get install openconnect lib32ncurses6 lib32tinfo6 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools</code><br><br>Download and unzip <a href=\"https://uci.service-now.com/sys_attachment.do?sys_id=3e869ef2db082b0054e7f236bf961900\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>.<br><br>Go to the vpn folder and run ./vpn_install.sh then install the vpn.<br><br>Finally run the vpn using:<br><br><code class=\"language-bash\">/opt/cisco/anyconnect/bin/vpnui</code><br><br>For the university of Denver I use this URL to connect to:<br><br><code>https://vpn-external.du.edu:443</code><br><br>It then will ask for username and password, I use my ID number and password here.</p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "linux",
                   "cisco"
            ],
            "date_published": "2020-03-16T16:43:00-06:00",
            "date_modified": "2020-03-24T10:56:53-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/running-docker-compose-in-google-cloud.html",
            "url": "https://hojjatabdollahi.github.io/running-docker-compose-in-google-cloud.html",
            "title": "Running docker-compose in Google Cloud",
            "summary": "I have a docker container that works fine on my machine if I run it with docker-compose but it does not work well with running it using docker run , However, when I create a container to put it on Google Cloud, the Google Cloud&hellip;",
            "content_html": "<p id=\"9d98\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" >I have a docker container that works fine on my machine if I run it with <code>docker-compose</code> but it does not work well with running it using <code>docker run</code> , However, when I create a container to put it on Google Cloud, the Google Cloud SDK is not using <code>docker-compose</code>, here is how I fixed this problem.<br><br>First, you need to resize the hard disk. The hard disk that is being used by your instance is probably not big enough. Here I increase mine to 30GB. The hard disk name is the same as the instance name (do not add a new disk, it will not increase your root partition):<br><br><code class=\"language-bash\">gcloud compute disks resize example-disk — size 250</code><br><br>Add your ssh public key to your instance so that you can ssh into your account from your computer.<br><br>After increasing the disk space, copy all your files into the server using <code>scp</code>.<br><br><code class=\"language-bash\">scp * &lt;external_ip_address&gt;:~</code><br><br>Then ssh into your instance and make sure all your files are there.<br><br>Now you need to run <code>docker-compose</code> but it doesn’t exist in Google Cloud Container OS. To do that you need to first create a docker-compose container:<br><br><code class=\"language-bash\">docker run docker/compose:1.13.0 version</code><br><br>and then run this command:<br><br><code class=\"language-bash\">docker run --rm \\</code><br><code class=\"language-bash\"> -v /var/run/docker.sock:/var/run/docker.sock \\</code><br><code class=\"language-bash\"> -v \"$PWD:$PWD\" \\</code><br><code class=\"language-bash\"> -w=\"$PWD\" \\</code><br><code class=\"language-bash\"> docker/compose:1.13.0 up</code><br><br>I copied these lines from <a href=\"https://cloud.google.com/community/tutorials/docker-compose-on-container-optimized-os\">this tutorial</a>. But, I changed the second command because I kept getting an error saying “can not make directory /rootfs, filesystem is read-only”. That’s why I removed <code>rootfs</code> from my commands.<br><br>After running this command, your docker container should start and should work fine.</p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "docker",
                   "Google"
            ],
            "date_published": "2019-04-11T16:50:00-06:00",
            "date_modified": "2020-03-23T17:02:01-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/an-alternative-to-watch-command-in-windows.html",
            "url": "https://hojjatabdollahi.github.io/an-alternative-to-watch-command-in-windows.html",
            "title": "An alternative to &quot;watch&quot; command in Windows",
            "summary": "When I’m training a network in Linux, I always have a panel in my tmux that is showing the GPU usage over all 4 GPUs. To do so, I use nvidia-smi command and to keep it updating I use watch command. So, all I need&hellip;",
            "content_html": "When I’m training a network in Linux, I always have a panel in my tmux that is showing the GPU usage over all 4 GPUs. To do so, I use <code>nvidia-smi</code> command and to keep it updating I use <code>watch</code> command. So, all I need to write is:<br><br><code class=\"language-bash\">watch nvidia-smi</code><br><br>In windows you do not have the <code>watch</code> command and note that <code>nvidia-smi</code> might not be part of your <code>path</code> but if you have installed everything correctly, it should be here:<br><br><code>C:\\Program Files\\NVIDIA Corporation\\NVSMI</code><br><br>So, the alternative to <code>watch</code> in windows <strong>Powershell</strong> is using the while command:<br><br><code class=\"language-clike\">while (1) {cls; .\\nvidia-smi.exe; sleep 5}</code><br><br>However, <a href=\"https://github.com/markwragg/PowerShell-Watch\">someone made a module for Powershell</a>, but I find it inconvenient.",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "windows",
                   "powershell"
            ],
            "date_published": "2019-02-11T16:54:00-07:00",
            "date_modified": "2020-03-23T17:02:20-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/could-not-find-valid-device-for-node-while-eagerly-executing.html",
            "url": "https://hojjatabdollahi.github.io/could-not-find-valid-device-for-node-while-eagerly-executing.html",
            "title": "“Could not find valid device for node.” while eagerly executing.",
            "summary": "This cryptic error happens when the input to a function has the wrong type! Here is an example: import tensorflow as tf tf.enable_eager_execution() tf.sqrt(4) This will return a long error that basically says: InternalError: Could not find valid device for node. Node: {{node Sqrt}} =&hellip;",
            "content_html": "This cryptic error happens when the input to a function has the wrong type!<br><br>Here is an example:<br><br><code class=\"language-python\">import tensorflow as tf</code><br><code class=\"language-python\">tf.enable_eager_execution()</code><br><code class=\"language-python\">tf.sqrt(4)</code><br><br>This will return a long error that basically says:<br><br><code>InternalError: Could not find valid device for node. </code><br><code>Node: {{node Sqrt}} = Sqrt[T=DT_INT32](dummy_input) </code><br><code>All kernels registered for op Sqrt : </code><br><code> device='XLA_CPU'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_HALF] </code><br><code> device='XLA_GPU'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_BFLOAT16, DT_HALF] </code><br><code> device='XLA_CPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_HALF] </code><br><code> device='XLA_GPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_BFLOAT16, DT_HALF] </code><br><code> device='GPU'; T in [DT_DOUBLE] </code><br><code> device='GPU'; T in [DT_HALF] </code><br><code> device='GPU'; T in [DT_FLOAT] </code><br><code> device='CPU'; T in [DT_COMPLEX128] </code><br><code> device='CPU'; T in [DT_COMPLEX64] </code><br><code> device='CPU'; T in [DT_BFLOAT16] </code><br><code> device='CPU'; T in [DT_DOUBLE] </code><br><code> device='CPU'; T in [DT_HALF] </code><br><code> device='CPU'; T in [DT_FLOAT] </code><br><code> [Op:Sqrt] name: Sqrt/</code><br><br>If you pay close attention, it is saying the the input to the function sqrt should be one of <code>double, half, float, complex,...</code> but our input is <code>dt_int32</code> that’s the problem. This works:<br><br><code class=\"language-python\">import tensorflow as tf</code><br><code class=\"language-python\">tf.enable_eager_execution()</code><br><code class=\"language-python\">tf.sqrt(4.) #notice that now the input is a float number</code>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "tensorflow"
            ],
            "date_published": "2019-01-29T16:56:00-07:00",
            "date_modified": "2020-03-23T17:02:34-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/cudnn_status_not_initialized-when-trying-to-run-keras-but-not-tensorflow.html",
            "url": "https://hojjatabdollahi.github.io/cudnn_status_not_initialized-when-trying-to-run-keras-but-not-tensorflow.html",
            "title": "CUDNN_STATUS_NOT_INITIALIZED when trying to run Keras, but not TensorFlow!",
            "summary": "Curious. I could run a code in TF and it would use the GPU with absolutely no problem. But I had another code with Keras that would not run! After hours of pulling my hair out and cursing I figured it out. I have access&hellip;",
            "content_html": "Curious. I could run a code in TF and it would use the GPU with absolutely no problem. But I had another code with Keras that would not run!<br><br>After hours of pulling my hair out and cursing I figured it out. I have access to another machine and the same Keras code was running on that one with no problems. I figured that it could be the version of the NVIDIA driver, or CUDA or CuDNN.<br><br>On the faulty machine I had installed CuDNN using the “linux archive” instead of a simple “deb” file. So, I installed CuDNN that way, but nothing changed.<br><br>The NVIDIA driver on the faulty machine was 390.77 but on the good machine was 396.54. So, I set to install NVIDIA 396 on Ubuntu 18.04.<br><br>First you need to delete your current driver:<br><br><code class=\"language-bash\">sudo apt purge nvidia-*</code><br><br>Then add the graphics card driver repository:<br><br><code class=\"language-bash\">sudo add-apt-repository ppa:graphics-drivers/ppa</code><br><br>Then you need to install the driver:<br><br><code class=\"language-bash\">sudo apt install nvidia-driver-396 nvidia-utils-396 nvidia-kernel-common-396</code><br><br>Reboot.<br><br>That’s it. After the reboot everything should be working now.",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "tensorflow",
                   "nvidia",
                   "linux",
                   "keras"
            ],
            "date_published": "2019-01-04T16:59:00-07:00",
            "date_modified": "2020-03-23T17:03:09-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/how-to-set-the-pythonpath-for-your-virualenv-in-windows.html",
            "url": "https://hojjatabdollahi.github.io/how-to-set-the-pythonpath-for-your-virualenv-in-windows.html",
            "title": "How to set the PYTHONPATH for your VirualEnv in Windows",
            "summary": "VSCode keeps telling me “ImportError: No module named xxx”. Why? because I’m trying to run a code from a sub-folder and the module is in the parent directory. How to fix this? Well easy, add the parent directory to your PYTHONPATH. But how? There are&hellip;",
            "content_html": "VSCode keeps telling me “ImportError: No module named xxx”. Why? because I’m trying to run a code from a sub-folder and the module is in the parent directory. How to fix this? Well easy, add the parent directory to your PYTHONPATH. But how?<br><br>There are some options out there, for example adding the absolute address to a file named .env and placing it in your root folder.<br><br>Or adding the pythonpath to your launch.json file.<br><br>But this is how I did it:<br><br>Open the activate.ps1 file in your venv/scrips/activate.ps1 and add the following to the “deactivate” function:<br><br><code>if (Test-Path env:_OLD_VIRTUAL_PATH) {</code><br><code> copy-item env:_OLD_VIRTUAL_PATH env:PATH</code><br><code> remove-item env:_OLD_VIRTUAL_PATH</code><br><code> }</code><br><br>And add this to the end of the file:<br><br><code>if (Test-Path env:PYTHONPATH) {</code><br><code> copy-item env:PYTHONPATH env:_OLD_PYTHON_PATH</code><br><code>}</code><br><code>$env:PYTHONPATH = \"$(Resolve-Path \"$env:VIRTUAL_ENV\\..\");$env:PYTHONPATH\"</code>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "windows",
                   "python"
            ],
            "date_published": "2018-11-15T17:00:00-07:00",
            "date_modified": "2020-03-23T17:01:06-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/how-to-use-the-same-key-for-git-bash-and-sourcetree.html",
            "url": "https://hojjatabdollahi.github.io/how-to-use-the-same-key-for-git-bash-and-sourcetree.html",
            "title": "How to use the same key for Git Bash and Sourcetree.",
            "summary": "To create the SSH key you can use PuTTYgen. Using the following command in Git Bash create id_rsa.pub ssh-keygen -i -f public &gt; id_rsa.pub Copy the content of public and import it into Bitbucket. If you don’t know how read the “Add the public key&hellip;",
            "content_html": "<p>To create the SSH key you can use PuTTYgen.</p>\n<p><img class=\"post__image\" src=\"https://hojjatabdollahi.github.io/media/posts/8/1-KtLdO5GrNsCOdTDZEG8COA.png\" alt=\"\" width=\"362\" height=\"131\"></p>\n<figure class=\"post__image\">It will create <em>private.ppk</em> and <em>public</em>.<br><br>Then using the same window export to openssh and create <em>id_rsa</em></figure>\n<p><img class=\"post__image\" src=\"https://hojjatabdollahi.github.io/media/posts/8/1-b3DsFrgWL6dtDjkBobGSCA.png\" alt=\"\" width=\"572\" height=\"489\"><br><br>Using the following command in Git Bash create id_rsa.pub<br><br> <code class=\"language-bash\">ssh-keygen -i -f public &gt; id_rsa.pub</code><br><br>Copy the content of public and import it into Bitbucket. If you don’t know how read the “Add the public key to your Bitbucket settings” section in <a href=\"https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html\">here</a>.<br><br>Add the code in <a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases/\">here </a>to your <code>~/.bashrc</code> so it runs the agent every time you open <em>Git Bash</em>.<br><br>Now, you can push to your <em>Bitbucket</em> repository using <em>Git Bash</em> or <em>Sourcetree</em> without password.</p>\n<figure class=\"post__image\"></figure>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "windows",
                   "git"
            ],
            "date_published": "2018-10-17T17:06:00-06:00",
            "date_modified": "2020-03-23T17:11:25-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/how-i-solved-error-unable-to-find-vcvarsallbat.html",
            "url": "https://hojjatabdollahi.github.io/how-i-solved-error-unable-to-find-vcvarsallbat.html",
            "title": "How I solved “error Unable to find vcvarsall.bat”",
            "summary": "TL;DR So, to sum it up, in my case, it looks like that I needed both Microsoft Build Tools 2015 and 2017. And then I needed to copy and modify vcvarsall.bat into a new folder to make things work. Long version: So, I needed to&hellip;",
            "content_html": "TL;DR<br><br>So, to sum it up, in my case, it looks like that I needed both Microsoft Build Tools 2015 and 2017. And then I needed to copy and modify vcvarsall.bat into a new folder to make things work.<br><br>Long version:<br><br>So, I needed to install spaCy on Windows 10 64bit. But when I ran the following command:<br><br> <code class=\"language-bash\">pip install spaCy</code><br><br>It says:<br><br> <code>error Unable to find vcvarsall.bat</code><br><br>It is because spaCy has no pre-compiled wheels for windows and it tries to compile it for your system. But if your compiler setup is not correct (I don’t know what it should be), then you get the error above.<br><br>Unfortunately, there is no good binary wheels online, I tried to use the binaries provided <a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/\">here</a>.<br><br><br>But again, Spacy would try to compile a newer version of thinc and the same error would happen.<br><br>I searched everywhere and installed so many things that I have no idea exactly which one did the trick. But here is what I think helped:<br><br>Note that I installed spaCy in a virtual environment and I used PowerShell with administrator privileges to do so.<br><br>First we need to find where vcvarsall.bat is!<br>On my system it is here:<br><br> <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build</code><br><br>I think the reason that vcvarsall.bat is there, is because I installed <a href=\"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017\">Microsoft Build Tools 2017</a>. However, I also have Visual Studio 2017 Community on my machine.<br><br>As you can see, vcvarsall.bat is in my 2017 folder but python 3.5 needs a compiler and it is looking for vcvarsall.bat in 2015 folder, here:<br><code>C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC</code><br>That folder exists on my machine, I think because I installed <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48159\">Microsoft Build Tools 2015</a>. But there is no vcvarsall.bat in that folder. Note that Visual Sudio 14.0 is actually Visual Studio 2015. Also, I don’t have Visual Studio 2015 installed on my machine, just Microsoft Build Tools 2015. (I know, it is confusing)<br><br>So, I copied the vcvarsall.bat from the first address (2017), into this new address (2015). Now, it is complaining that it can not find cl.exe or an there is an error with link.exe or something like that.<br><br>Since vcvarsall.bat has relative paths in it, I opened it and replaced all the<br><br> <code>%~dp0</code><br><br>with<br><br> <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\</code><br><br>After doing so, the installation for spaCy worked.<br><br>Go figure!",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "visual studio",
                   "spacy",
                   "python"
            ],
            "date_published": "2018-10-05T17:15:00-06:00",
            "date_modified": "2020-03-23T17:15:41-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/fix-msb0001-internal-msbuild-error-throwing-from-logger-shutdown.html",
            "url": "https://hojjatabdollahi.github.io/fix-msb0001-internal-msbuild-error-throwing-from-logger-shutdown.html",
            "title": "Fix “MSB0001: Internal MSBuild Error: Throwing from logger shutdown”",
            "summary": "After updating Visual Studio 2017 (15.5) to 2017 (15.8) I was not able to open any of my projects. It would just say “Unable to open one or more project, see the output window” and there was nothing in the output window. I opened one&hellip;",
            "content_html": "<p id=\"6662\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" >After updating Visual Studio 2017 (15.5) to 2017 (15.8) I was not able to open any of my projects. It would just say “Unable to open one or more project, see the output window” and there was nothing in the output window.</p>\n<p id=\"2801\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" >I opened one project separately and it said:</p>\n<p id=\"bbcf\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" ><code>MSB0001: Internal MSBuild Error: Throwing from logger shutdown</code></p>\n<p id=\"a3b4\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" >To fix it you need to open “Developer Command Prompt For VS 2017” as Administrator and run the following command:</p>\n<p id=\"c360\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" ><code>gacutil /u Microsoft.Build.Framework</code></p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "visual studio"
            ],
            "date_published": "2018-09-19T17:16:00-06:00",
            "date_modified": "2020-03-23T17:17:00-06:00"
        }
    ]
}
