{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hojjat&#x27;s Blog",
    "description": "",
    "home_page_url": "https://hojjatabdollahi.github.io",
    "feed_url": "https://hojjatabdollahi.github.io/feed.json",
    "user_comment": "",
    "icon": "https://hojjatabdollahi.github.io/media/website/1-1VP7np2H17ecc1j8roHGvQ.jpeg",
    "author": {
        "name": "Hojjat"
    },
    "items": [
        {
            "id": "https://hojjatabdollahi.github.io/couchdb-on-ubuntu-1804.html",
            "url": "https://hojjatabdollahi.github.io/couchdb-on-ubuntu-1804.html",
            "title": "CouchDB on Ubuntu 18.04",
            "summary": "Install CouchDB using snap: sudo snap install couchdb Set the admin pass: sudo snap set couchdb admin=1 Give it permissions that it needs: sudo snap connect couchdb:mount-observe sudo snap connect couchdb:process-control Start the service: sudo snap start couchdb Go to this address in your browser:&hellip;",
            "content_html": "<p>Install CouchDB using snap:</p>\n<p><code class=\"language-bash\">sudo snap install couchdb</code></p>\n<p>Set the admin pass:</p>\n<p><code class=\"language-bash\">sudo snap set couchdb admin=1</code></p>\n<p>Give it permissions that it needs:</p>\n<p><code class=\"language-bash\">sudo snap connect couchdb:mount-observe</code></p>\n<p><code class=\"language-bash\">sudo snap connect couchdb:process-control</code></p>\n<p>Start the service:</p>\n<p><code class=\"language-bash\">sudo snap start couchdb</code></p>\n<p>Go to this address in your browser: `<a href=\"http://localhost:5984/_utils&#96;\">http://localhost:5984/_utils</a>`</p>\n<p>Install `jq` for prettifying the output json</p>\n<p><code class=\"language-bash\">sudo apt install jq</code></p>\n<p>Create 3 files. </p>\n<p>1- call this file `get`</p>\n<p><code class=\"language-bash\">#!/bin/bash</code></p>\n<p><code class=\"language-bash\">curl -sX GET http://admin:1@localhost:5984/$1 | jq</code></p>\n<p>2- call this file `put`</p>\n<p><code class=\"language-bash\">#!/bin/bash</code></p>\n<p><code class=\"language-bash\">curl -sX PUT http://admin:1@localhost:5984/$1 | jq</code></p>\n<p>3- call this file `del`</p>\n<p><code class=\"language-bash\">#!/bin/bash</code></p>\n<p><code class=\"language-bash\">curl -sX DELETE http://admin:1@localhost:5984/$1 | jq</code></p>\n<p>Make these executable and add them to a folder that exists in the  $PATH.</p>\n<p>The `-s` in the `curl` command is there to not show the download progressbar. Otherwise, the output of these files will have some extra lines in the begninning that makes it ugly.</p>\n<p>Now you can run commands like this:</p>\n<p><code class=\"language-bash\">get _all_dbs</code></p>\n<p> </p>",
            "image": "https://hojjatabdollahi.github.io/media/posts/16/CouchDB.svg",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "sh",
                   "linux",
                   "curl",
                   "couchdb"
            ],
            "date_published": "2020-05-19T19:35:13-06:00",
            "date_modified": "2020-05-20T09:41:51-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/chaning-the-swap-file-size-in-ubuntu-18045.html",
            "url": "https://hojjatabdollahi.github.io/chaning-the-swap-file-size-in-ubuntu-18045.html",
            "title": "Chaning the SWAP file size in Ubuntu 18.045",
            "summary": "If you install linux without a dedicated swap partition you will get a swap file. The swap file is in root: `/swapfile` To see the size you can run `swapon --show` You can turn off swap with `sudo swapoff /swapfile` If you run `free -h`&hellip;",
            "content_html": "If you install linux without a dedicated swap partition you will get a swap file. The swap file is in root:<br>`/swapfile`<br><br>To see the size you can run<br>`swapon --show`<br><br>You can turn off swap with<br>`sudo swapoff /swapfile`<br><br>If you run `free -h` you will see that you have 0 swap<br><br>Now you can allocate more space to that swapfile<br>`sudo fallocate -l 20G /swapfile`<br><br>Now make that file a swap again<br>`sudo mkswap /swapfile`<br><br>And now turn on swap again<br>`sudo swapon /swapfile`<br>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "sh",
                   "linux"
            ],
            "date_published": "2020-05-13T16:32:08-06:00",
            "date_modified": "2020-05-13T16:32:08-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/docker-with-a-volume-with-user-level-pre.html",
            "url": "https://hojjatabdollahi.github.io/docker-with-a-volume-with-user-level-pre.html",
            "title": "Docker with a volume with user-level permissions",
            "summary": "If you mount a folder in your docker all the files created in it will be owned by the root. To fix this add the following to the Dockerfile ARG USER_ID ARG GROUP_ID RUN addgroup --gid $GROUP_ID user RUN adduser --disabled-password --gecos '' --uid $USER_ID&hellip;",
            "content_html": "<p>If you mount a folder in your docker all the files created in it will be owned by the root. To fix this add the following to the Dockerfile</p>\n<p><code class=\"language-bash\">ARG USER_ID</code><br><code class=\"language-bash\">ARG GROUP_ID</code><br><br><code class=\"language-bash\">RUN addgroup --gid $GROUP_ID user</code><br><code class=\"language-bash\">RUN adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID user</code><br><code class=\"language-bash\">USER user</code></p>\n<p>and then create the image like so:</p>\n<p><code class=\"language-bash\">docker build -t tensorflow112 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -f Dockerfiles/ubuntu-shared-cuda .</code></p>\n<p>create the instance like so:</p>\n<p><code class=\"language-bash\">docker run -it --name tf112 --user \"$(id -u):$(id -g)\" -v $(pwd):/home tensorflow112</code></p>\n<p>and you can start it later like so:</p>\n<p><code class=\"language-bash\">docker start -i tf112</code></p>\n<p>How to give it a password:</p>\n<p><code class=\"language-bash\">docker exec -it --user root tf112 bash</code><br><code class=\"language-bash\">echo 'user:1' | chpasswd</code></p>\n<p>How to give the user sudo permission:</p>\n<p><code class=\"language-bash\">docker exec -it --user root tf112 bash</code><br><code class=\"language-bash\">usermod -aG sudo user</code></p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "linux",
                   "docker"
            ],
            "date_published": "2020-04-27T15:13:23-06:00",
            "date_modified": "2020-04-27T17:07:35-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/how-to-merge-two-pdfs-in-ubuntu-1804.html",
            "url": "https://hojjatabdollahi.github.io/how-to-merge-two-pdfs-in-ubuntu-1804.html",
            "title": "How to merge two PDFs in Ubuntu 18.04",
            "summary": "Install pdftk: sudo add-apt-repository ppa:malteworld/ppa sudo apt install pdftk Then simply call it: pdftk file1.pdf file2.pdf cat output merged_output.pdf ",
            "content_html": "<p>Install <code>pdftk</code>:</p>\n<p><code class=\"language-bash\">sudo add-apt-repository ppa:malteworld/ppa</code></p>\n<p><code class=\"language-bash\">sudo apt install pdftk</code></p>\n<p>Then simply call it:</p>\n<p><code class=\"language-bash\">pdftk file1.pdf file2.pdf cat output merged_output.pdf</code></p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "sh",
                   "linux"
            ],
            "date_published": "2020-04-20T16:47:14-06:00",
            "date_modified": "2020-04-20T16:47:14-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/how-to-switch-between-different-versions-of-g.html",
            "url": "https://hojjatabdollahi.github.io/how-to-switch-between-different-versions-of-g.html",
            "title": "How to switch between different versions of g++",
            "summary": "I needed to compile an old code and needed to use older versions of g++. Here is how I did it: sudo apt install g++-4.8 g++-5 g++-6 g++-7 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 1 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1 sudo update-alternatives --install&hellip;",
            "content_html": "<p>I needed to compile an old code and needed to use older versions of g++. Here is how I did it:</p>\n<ul>\n<li>First, install the older version</li>\n</ul>\n<p><code class=\"language-bash\">sudo apt install g++-4.8 g++-5 g++-6 g++-7</code></p>\n<ul>\n<li>Then, tell the system that there is a new alternative</li>\n</ul>\n<p><code class=\"language-bash\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 1</code><br><code class=\"language-bash\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1</code><br><code class=\"language-bash\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 1</code></p>\n<ul>\n<li>Finally you can choose which g++ you want to use:</li>\n</ul>\n<p><code class=\"language-bash\">sudo upate-alternatives --config g++</code></p>\n<p> </p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "linux"
            ],
            "date_published": "2020-04-07T11:32:51-06:00",
            "date_modified": "2020-04-07T11:37:31-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/cisco-anyconnect-vpn-in-linux-ubuntu-1910.html",
            "url": "https://hojjatabdollahi.github.io/cisco-anyconnect-vpn-in-linux-ubuntu-1910.html",
            "title": "Cisco AnyConnect VPN in Linux (Ubuntu 18.04,19.10)",
            "summary": "I’m writing this here for my future use. Install these: Ubuntu 18.04: sudo apt-get install openconnect lib32ncurses5 lib32tinfo5 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools Ubuntu 19.10: sudo apt-get install openconnect lib32ncurses6 lib32tinfo6 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools Download and unzip this. Go to the&hellip;",
            "content_html": "<p><em>I’m writing this here for my future use.</em><br><br>Install these:<br>Ubuntu 18.04:</p>\n<p><code class=\"language-bash\">sudo apt-get install openconnect lib32ncurses5 lib32tinfo5 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools</code></p>\n<p>Ubuntu 19.10:<br><code class=\"language-bash\">sudo apt-get install openconnect lib32ncurses6 lib32tinfo6 lib32z1 libc6-i386 libpkcs11-helper1 openvpn vpnc-scripts net-tools</code><br><br>Download and unzip <a href=\"https://uci.service-now.com/sys_attachment.do?sys_id=3e869ef2db082b0054e7f236bf961900\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>.<br><br>Go to the vpn folder and run ./vpn_install.sh then install the vpn.<br><br>Finally run the vpn using:<br><br><code class=\"language-bash\">/opt/cisco/anyconnect/bin/vpnui</code><br><br>For the university of Denver I use this URL to connect to:<br><br><code>https://vpn-external.du.edu:443</code><br><br>It then will ask for username and password, I use my ID number and password here.</p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "linux",
                   "cisco"
            ],
            "date_published": "2020-03-16T16:43:00-06:00",
            "date_modified": "2020-03-24T10:56:53-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/running-docker-compose-in-google-cloud.html",
            "url": "https://hojjatabdollahi.github.io/running-docker-compose-in-google-cloud.html",
            "title": "Running docker-compose in Google Cloud",
            "summary": "I have a docker container that works fine on my machine if I run it with docker-compose but it does not work well with running it using docker run , However, when I create a container to put it on Google Cloud, the Google Cloud&hellip;",
            "content_html": "<p id=\"9d98\" class=\"fs ft by ar fu b fv fw fx fy fz ga gb gc gd ge gf dp\" >I have a docker container that works fine on my machine if I run it with <code>docker-compose</code> but it does not work well with running it using <code>docker run</code> , However, when I create a container to put it on Google Cloud, the Google Cloud SDK is not using <code>docker-compose</code>, here is how I fixed this problem.<br><br>First, you need to resize the hard disk. The hard disk that is being used by your instance is probably not big enough. Here I increase mine to 30GB. The hard disk name is the same as the instance name (do not add a new disk, it will not increase your root partition):<br><br><code class=\"language-bash\">gcloud compute disks resize example-disk — size 250</code><br><br>Add your ssh public key to your instance so that you can ssh into your account from your computer.<br><br>After increasing the disk space, copy all your files into the server using <code>scp</code>.<br><br><code class=\"language-bash\">scp * &lt;external_ip_address&gt;:~</code><br><br>Then ssh into your instance and make sure all your files are there.<br><br>Now you need to run <code>docker-compose</code> but it doesn’t exist in Google Cloud Container OS. To do that you need to first create a docker-compose container:<br><br><code class=\"language-bash\">docker run docker/compose:1.13.0 version</code><br><br>and then run this command:<br><br><code class=\"language-bash\">docker run --rm \\</code><br><code class=\"language-bash\"> -v /var/run/docker.sock:/var/run/docker.sock \\</code><br><code class=\"language-bash\"> -v \"$PWD:$PWD\" \\</code><br><code class=\"language-bash\"> -w=\"$PWD\" \\</code><br><code class=\"language-bash\"> docker/compose:1.13.0 up</code><br><br>I copied these lines from <a href=\"https://cloud.google.com/community/tutorials/docker-compose-on-container-optimized-os\">this tutorial</a>. But, I changed the second command because I kept getting an error saying “can not make directory /rootfs, filesystem is read-only”. That’s why I removed <code>rootfs</code> from my commands.<br><br>After running this command, your docker container should start and should work fine.</p>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "docker",
                   "Google"
            ],
            "date_published": "2019-04-11T16:50:00-06:00",
            "date_modified": "2020-03-23T17:02:01-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/an-alternative-to-watch-command-in-windows.html",
            "url": "https://hojjatabdollahi.github.io/an-alternative-to-watch-command-in-windows.html",
            "title": "An alternative to &quot;watch&quot; command in Windows",
            "summary": "When I’m training a network in Linux, I always have a panel in my tmux that is showing the GPU usage over all 4 GPUs. To do so, I use nvidia-smi command and to keep it updating I use watch command. So, all I need&hellip;",
            "content_html": "When I’m training a network in Linux, I always have a panel in my tmux that is showing the GPU usage over all 4 GPUs. To do so, I use <code>nvidia-smi</code> command and to keep it updating I use <code>watch</code> command. So, all I need to write is:<br><br><code class=\"language-bash\">watch nvidia-smi</code><br><br>In windows you do not have the <code>watch</code> command and note that <code>nvidia-smi</code> might not be part of your <code>path</code> but if you have installed everything correctly, it should be here:<br><br><code>C:\\Program Files\\NVIDIA Corporation\\NVSMI</code><br><br>So, the alternative to <code>watch</code> in windows <strong>Powershell</strong> is using the while command:<br><br><code class=\"language-clike\">while (1) {cls; .\\nvidia-smi.exe; sleep 5}</code><br><br>However, <a href=\"https://github.com/markwragg/PowerShell-Watch\">someone made a module for Powershell</a>, but I find it inconvenient.",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "windows",
                   "powershell"
            ],
            "date_published": "2019-02-11T16:54:00-07:00",
            "date_modified": "2020-03-23T17:02:20-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/could-not-find-valid-device-for-node-while-eagerly-executing.html",
            "url": "https://hojjatabdollahi.github.io/could-not-find-valid-device-for-node-while-eagerly-executing.html",
            "title": "“Could not find valid device for node.” while eagerly executing.",
            "summary": "This cryptic error happens when the input to a function has the wrong type! Here is an example: import tensorflow as tf tf.enable_eager_execution() tf.sqrt(4) This will return a long error that basically says: InternalError: Could not find valid device for node. Node: {{node Sqrt}} =&hellip;",
            "content_html": "This cryptic error happens when the input to a function has the wrong type!<br><br>Here is an example:<br><br><code class=\"language-python\">import tensorflow as tf</code><br><code class=\"language-python\">tf.enable_eager_execution()</code><br><code class=\"language-python\">tf.sqrt(4)</code><br><br>This will return a long error that basically says:<br><br><code>InternalError: Could not find valid device for node. </code><br><code>Node: {{node Sqrt}} = Sqrt[T=DT_INT32](dummy_input) </code><br><code>All kernels registered for op Sqrt : </code><br><code> device='XLA_CPU'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_HALF] </code><br><code> device='XLA_GPU'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_BFLOAT16, DT_HALF] </code><br><code> device='XLA_CPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_HALF] </code><br><code> device='XLA_GPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_COMPLEX64, DT_BFLOAT16, DT_HALF] </code><br><code> device='GPU'; T in [DT_DOUBLE] </code><br><code> device='GPU'; T in [DT_HALF] </code><br><code> device='GPU'; T in [DT_FLOAT] </code><br><code> device='CPU'; T in [DT_COMPLEX128] </code><br><code> device='CPU'; T in [DT_COMPLEX64] </code><br><code> device='CPU'; T in [DT_BFLOAT16] </code><br><code> device='CPU'; T in [DT_DOUBLE] </code><br><code> device='CPU'; T in [DT_HALF] </code><br><code> device='CPU'; T in [DT_FLOAT] </code><br><code> [Op:Sqrt] name: Sqrt/</code><br><br>If you pay close attention, it is saying the the input to the function sqrt should be one of <code>double, half, float, complex,...</code> but our input is <code>dt_int32</code> that’s the problem. This works:<br><br><code class=\"language-python\">import tensorflow as tf</code><br><code class=\"language-python\">tf.enable_eager_execution()</code><br><code class=\"language-python\">tf.sqrt(4.) #notice that now the input is a float number</code>",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "tensorflow"
            ],
            "date_published": "2019-01-29T16:56:00-07:00",
            "date_modified": "2020-03-23T17:02:34-06:00"
        },
        {
            "id": "https://hojjatabdollahi.github.io/cudnn_status_not_initialized-when-trying-to-run-keras-but-not-tensorflow.html",
            "url": "https://hojjatabdollahi.github.io/cudnn_status_not_initialized-when-trying-to-run-keras-but-not-tensorflow.html",
            "title": "CUDNN_STATUS_NOT_INITIALIZED when trying to run Keras, but not TensorFlow!",
            "summary": "Curious. I could run a code in TF and it would use the GPU with absolutely no problem. But I had another code with Keras that would not run! After hours of pulling my hair out and cursing I figured it out. I have access&hellip;",
            "content_html": "Curious. I could run a code in TF and it would use the GPU with absolutely no problem. But I had another code with Keras that would not run!<br><br>After hours of pulling my hair out and cursing I figured it out. I have access to another machine and the same Keras code was running on that one with no problems. I figured that it could be the version of the NVIDIA driver, or CUDA or CuDNN.<br><br>On the faulty machine I had installed CuDNN using the “linux archive” instead of a simple “deb” file. So, I installed CuDNN that way, but nothing changed.<br><br>The NVIDIA driver on the faulty machine was 390.77 but on the good machine was 396.54. So, I set to install NVIDIA 396 on Ubuntu 18.04.<br><br>First you need to delete your current driver:<br><br><code class=\"language-bash\">sudo apt purge nvidia-*</code><br><br>Then add the graphics card driver repository:<br><br><code class=\"language-bash\">sudo add-apt-repository ppa:graphics-drivers/ppa</code><br><br>Then you need to install the driver:<br><br><code class=\"language-bash\">sudo apt install nvidia-driver-396 nvidia-utils-396 nvidia-kernel-common-396</code><br><br>Reboot.<br><br>That’s it. After the reboot everything should be working now.",
            "author": {
                "name": "Hojjat"
            },
            "tags": [
                   "tensorflow",
                   "nvidia",
                   "linux",
                   "keras"
            ],
            "date_published": "2019-01-04T16:59:00-07:00",
            "date_modified": "2020-03-23T17:03:09-06:00"
        }
    ]
}
